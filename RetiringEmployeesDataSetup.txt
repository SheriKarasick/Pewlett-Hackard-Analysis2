-- Defining the data set for analysis of the retiring population; the data table in 
-- the query is identified as "challenge_info".
SELECT e.emp_no,
	e.first_name, 
	e.last_name, 
	e.gender,
	e.hire_date,
	s.salary,
	t.title,
	t.from_date
	de.to_date
INTO challenge_info
FROM employees as e
INNER JOIN salaries as s
	ON (e.emp_no = s.emp_no)
INNER JOIN dept_emp as de
	ON (e.emp_no = de.emp_no)
INNER JOIN titles as t
	ON (e.emp_no = t.emp_no)
WHERE (e.birth_date BETWEEN '1952-01-01' AND '1955-12-31')
	AND (e.hire_date BETWEEN '1985-01-01' AND '1988-12-31')
	AND (de.to_date = '9999-01-01');

-- The table "challenge_info" contains duplicate data from employees as they 
-- transitioned to new positions through their career.  In order to remove 
-- duplicates, a partitioned segment of the database was created to remove data 
-- and select the most recent title as the representative line of data.  The output is
-- stored as a new table identified as "tableWithCount".  This portion of the partition
-- isolates the entries that have more than one row.

SELECT
	ci.first_name, 
	ci.last_name,
	count(*)
INTO tableWithCount
FROM challenge_info as ci
GROUP BY
	first_name, 
	last_name
HAVING count(*) > 1;

SELECT * FROM 
	(SELECT *, COUNT(*)
	OVER
	(PARTITION BY
	   first_name,
		last_name
	 ) AS count
	 FROM challenge_info as ci) tableWithCount
	 WhERE tableWithCount.count > 1;


-- This section of the partition chooses the row with the most recent entry in the 
-- job title from_date field.  Data is saved in the table "partition_challenge".
	 

-- Creating a partitioned table
	SELECT emp_no,
	first_name,
	last_name,
	gender,
	hire_date,
	salary,
	title,
	from_date,
	to_date 
INTO partition_challenge
	FROM
	(SELECT emp_no, first_name, last_name, gender, hire_date, salary, title, from_date, to_date, 
	 ROW_NUMBER() OVER
    (PARTITION BY (first_name, last_name) ORDER BY from_date DESC) rn FROM challenge_info
	 ) tmp WHERE rn = 1;

SELECT 
	COUNT(*)
FROM 
	partition_challenge;
32859 individual entries in database.
